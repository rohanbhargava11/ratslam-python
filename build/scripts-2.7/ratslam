#!/usr/bin/python
import roslib,rospy,sys
roslib.load_manifest('ratslam-python')
from cv_bridge import CvBridge,CvBridgeError
import ratslam
import sys
import time
import os, os.path
from numpy import *
from matplotlib.pylab import *
#import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import cPickle as pkl
import cv2
from sensor_msgs.msg import Image

def draw_position(x, y):
    scatter(x,y)

def draw_x_y_z(pcmax, xcoord, ycoord, thcoord, subplot):
    ax3 = Axes3D(gcf(), rect=subplot.get_position())
    ax3.scatter(xcoord, ycoord, thcoord, 'z')
    ax3.set_xlim3d([0, 61])
    ax3.set_ylim3d([0, 61])
    ax3.set_zlim3d([0, 36])

def callback(data):
    #rval,image_source=video.read()
    image_source=array(bridge.imgmsg_to_cv(data,"bgr8"))
    image_source=cv2.cvtColor(image_source,cv2.COLOR_BGR2GRAY)
    driver = ratslam.RatSLAM(image_source,video)
 
    xcoord = []
    ycoord = []
    thcoord = []
    
    last_time = time.time()
    
    n_steps = 21000
    #n_steps = 500
    
    ########################################################################
    for i in xrange(n_steps):
        
        # option to quit/break cleanly
        if wait_for_key:
            print "Press key to continue to next image or 'q' to quit"
            input = raw_input()
            if input == 'q':
                break
        
        # do a time step of the simulation
        driver.evolve()
        
        # query some values for plotting
        im = driver.current_image
        emap = driver.experience_map
        pcmax = driver.current_pose_cell
        odo = driver.current_odo
        current_exp = emap.current_exp
        #print current_exp.x_m
        xcoord.append(pcmax[0])
        ycoord.append(pcmax[1])
        thcoord.append(pcmax[2])
        now = time.time()
	fps = 1.0 / (now - last_time)
	last_time = now
	print "Using frames %i and %i (%f fps ; %f spf)" % (i, i+1, fps, 1.0/fps)

        if pkl_state and i % 100 == 0:
            print "Pickling..."
            with open(os.path.join(output_path, "output%06i.pkl" % i), 'wb') as f:
                pkl.dump(driver, f)
        ion()
        if i % 5 == 0:
              
            print "Plotting..."
            subplot(2,2,1)
            imshow(im, cmap=cm.gray)
            a=gca()
            a.axis('off')
            title('Raw Image')
        
            subplot(2,2,2)
            draw_position(odo[0], odo[1])
            b = gca()
            title('Raw Odometry')
            #b.set_xlim([-50, 100])
            #b.set_ylim([0, 125])
        
            pcdata = subplot(2,2,3)
            draw_x_y_z(pcmax, xcoord, ycoord, thcoord, pcdata)
            title('Pose Cell Activity')
            pcdata.axis('off')
        
            subplot(2,2,4)
            draw_position(current_exp.x_m, current_exp.y_m)
            title('Experience Map')
            d = gca()
        draw()
            #savefig(os.path.join(output_path, 'output%06i.png' % i))
            #d.set_xlim([-50, 100])
            #d.set_ylim([0, 120])
  
def main(): 
    # TODO use argparse
    #video_path = sys.argv[1]
    output_path = sys.argv[1]

    pkl_state = False
    wait_for_key = False

    bridge=CvBridge()
    topic='image_raw/image_decompressed'
    image_sub=rospy.Subscriber(topic_camera,Image,callback)
    print "about to spin"
    rospy.spin()
    #image_source = ratslam.VideoSource(video_path, grayscale=True)
    #video=cv2.VideoCapture('/home/rohan/Downloads/video002.mp4')
    

    

############################################################################

if __name__ == "__main__":
    main()
